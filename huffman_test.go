package huffman

import (
	"bytes"

	"math/rand"
	"testing"

	"github.com/ElwinCabrera/go-data-structs/trees"
)

func testCompressAndDecompress(t *testing.T, testData *[]byte) {

	compressedData, _ := Compress(testData)

	unCompressedData := Decompress(&compressedData)

	//unCompressedStr := string(*unCompressedData)
	//fmt.Println(unCompressedStr)
	if !bytes.Equal(*testData, *unCompressedData) {
		t.Errorf("Decompress failed. Expected %v, got %v", *testData, *unCompressedData)
	}
}

func testSerializeDeSerializeOfHuffmanCodes(t *testing.T, testData *[]byte) {

	//Get the frequency each byte appears in the data we want to compress
	freqMap := make(map[byte]int)
	for _, b := range *testData {
		freqMap[b]++
	}

	ht := trees.NewHuffmanTreeFromFrequencyMap(freqMap)
	huffmanCodes := ht.GetHuffmanCodes()

	serializedHuffmanCodes := serializeHuffmanCodes(huffmanCodes)

	deserializedHuffmanCodes, serializedDataLen := deSerializeHuffmanCodesFromByteArray(&serializedHuffmanCodes)

	if serializedDataLen != len(serializedHuffmanCodes) {
		t.Fatalf("byte array length of serialized huffmancode does not match the one got when deserializing. got %v expected %v ", serializedDataLen, len(serializedHuffmanCodes))
	}

	for k, v1 := range huffmanCodes {
		v2, ok := deserializedHuffmanCodes[k]
		if !ok {
			t.Fatalf("huffman code for key %v not found in deserialized huffman codes", k)
		}
		if v1.GetXBytes(8) != v2.GetXBytes(8) {
			t.Fatalf("Deserialized huffman codes are not the dame as the original. expected %v but got %v when deserialized for key %v\n", v1, v2, k)
		}
	}

}

func createRandomStringOfASCIIChars(size int) string {
	//careful a size of 300k in my system caused a stack overflow
	//not because the code is wroing but because my it exceeded stack limit set on my system, IDE, or in go settings
	//I got "goroutine stack exceeds 1000000000-byte limit" will check on why this happened another time
	res := ""
	for i := 0; i < size; i++ {
		ranByte := byte(rand.Intn(256))
		res += string(ranByte)
	}
	return res
}

func TestAll(t *testing.T) {
	testStr1 := "A_DEAD_DAD_CEDED_A_BAD_BABE"
	testStr2 := "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"

	testDataToCompress := []string{testStr1, testStr2, createRandomStringOfASCIIChars(5000), createRandomStringOfASCIIChars(200000)}

	for _, str := range testDataToCompress {
		data := []byte(str)
		testSerializeDeSerializeOfHuffmanCodes(t, &data)
		testCompressAndDecompress(t, &data)
	}

}
